#include "waterfall_colormaps.h"

static inline int F2B(float f)
{
    int b = (f >= 1.0 ? 255 : (f <= 0.0 ? 0 : (int)floor(f * 256.0)));
    return b;
}

// contributed by Chris Kuethe @ckuethe
// source
// https://ai.googleblog.com/2019/08/turbo-improved-rainbow-colormap-for.html
static unsigned char turbo[256][3] = {
    {48, 18, 59},   {50, 21, 67},   {51, 24, 74},    {52, 27, 81},
    {53, 30, 88},   {54, 33, 95},   {55, 36, 102},   {56, 39, 109},
    {57, 42, 115},  {58, 45, 121},  {59, 47, 128},   {60, 50, 134},
    {61, 53, 139},  {62, 56, 145},  {63, 59, 151},   {63, 62, 156},
    {64, 64, 162},  {65, 67, 167},  {65, 70, 172},   {66, 73, 177},
    {66, 75, 181},  {67, 78, 186},  {68, 81, 191},   {68, 84, 195},
    {68, 86, 199},  {69, 89, 203},  {69, 92, 207},   {69, 94, 211},
    {70, 97, 214},  {70, 100, 218}, {70, 102, 221},  {70, 105, 224},
    {70, 107, 227}, {71, 110, 230}, {71, 113, 233},  {71, 115, 235},
    {71, 118, 238}, {71, 120, 240}, {71, 123, 242},  {70, 125, 244},
    {70, 128, 246}, {70, 130, 248}, {70, 133, 250},  {70, 135, 251},
    {69, 138, 252}, {69, 140, 253}, {68, 143, 254},  {67, 145, 254},
    {66, 148, 255}, {65, 150, 255}, {64, 153, 255},  {62, 155, 254},
    {61, 158, 254}, {59, 160, 253}, {58, 163, 252},  {56, 165, 251},
    {55, 168, 250}, {53, 171, 248}, {51, 173, 247},  {49, 175, 245},
    {47, 178, 244}, {46, 180, 242}, {44, 183, 240},  {42, 185, 238},
    {40, 188, 235}, {39, 190, 233}, {37, 192, 231},  {35, 195, 228},
    {34, 197, 226}, {32, 199, 223}, {31, 201, 221},  {30, 203, 218},
    {28, 205, 216}, {27, 208, 213}, {26, 210, 210},  {26, 212, 208},
    {25, 213, 205}, {24, 215, 202}, {24, 217, 200},  {24, 219, 197},
    {24, 221, 194}, {24, 222, 192}, {24, 224, 189},  {25, 226, 187},
    {25, 227, 185}, {26, 228, 182}, {28, 230, 180},  {29, 231, 178},
    {31, 233, 175}, {32, 234, 172}, {34, 235, 170},  {37, 236, 167},
    {39, 238, 164}, {42, 239, 161}, {44, 240, 158},  {47, 241, 155},
    {50, 242, 152}, {53, 243, 148}, {56, 244, 145},  {60, 245, 142},
    {63, 246, 138}, {67, 247, 135}, {70, 248, 132},  {74, 248, 128},
    {78, 249, 125}, {82, 250, 122}, {85, 250, 118},  {89, 251, 115},
    {93, 252, 111}, {97, 252, 108}, {101, 253, 105}, {105, 253, 102},
    {109, 254, 98}, {113, 254, 95}, {117, 254, 92},  {121, 254, 89},
    {125, 255, 86}, {128, 255, 83}, {132, 255, 81},  {136, 255, 78},
    {139, 255, 75}, {143, 255, 73}, {146, 255, 71},  {150, 254, 68},
    {153, 254, 66}, {156, 254, 64}, {159, 253, 63},  {161, 253, 61},
    {164, 252, 60}, {167, 252, 58}, {169, 251, 57},  {172, 251, 56},
    {175, 250, 55}, {177, 249, 54}, {180, 248, 54},  {183, 247, 53},
    {185, 246, 53}, {188, 245, 52}, {190, 244, 52},  {193, 243, 52},
    {195, 241, 52}, {198, 240, 52}, {200, 239, 52},  {203, 237, 52},
    {205, 236, 52}, {208, 234, 52}, {210, 233, 53},  {212, 231, 53},
    {215, 229, 53}, {217, 228, 54}, {219, 226, 54},  {221, 224, 55},
    {223, 223, 55}, {225, 221, 55}, {227, 219, 56},  {229, 217, 56},
    {231, 215, 57}, {233, 213, 57}, {235, 211, 57},  {236, 209, 58},
    {238, 207, 58}, {239, 205, 58}, {241, 203, 58},  {242, 201, 58},
    {244, 199, 58}, {245, 197, 58}, {246, 195, 58},  {247, 193, 58},
    {248, 190, 57}, {249, 188, 57}, {250, 186, 57},  {251, 184, 56},
    {251, 182, 55}, {252, 179, 54}, {252, 177, 54},  {253, 174, 53},
    {253, 172, 52}, {254, 169, 51}, {254, 167, 50},  {254, 164, 49},
    {254, 161, 48}, {254, 158, 47}, {254, 155, 45},  {254, 153, 44},
    {254, 150, 43}, {254, 147, 42}, {254, 144, 41},  {253, 141, 39},
    {253, 138, 38}, {252, 135, 37}, {252, 132, 35},  {251, 129, 34},
    {251, 126, 33}, {250, 123, 31}, {249, 120, 30},  {249, 117, 29},
    {248, 114, 28}, {247, 111, 26}, {246, 108, 25},  {245, 105, 24},
    {244, 102, 23}, {243, 99, 21},  {242, 96, 20},   {241, 93, 19},
    {240, 91, 18},  {239, 88, 17},  {237, 85, 16},   {236, 83, 15},
    {235, 80, 14},  {234, 78, 13},  {232, 75, 12},   {231, 73, 12},
    {229, 71, 11},  {228, 69, 10},  {226, 67, 10},   {225, 65, 9},
    {223, 63, 8},   {221, 61, 8},   {220, 59, 7},    {218, 57, 7},
    {216, 55, 6},   {214, 53, 6},   {212, 51, 5},    {210, 49, 5},
    {208, 47, 5},   {206, 45, 4},   {204, 43, 4},    {202, 42, 4},
    {200, 40, 3},   {197, 38, 3},   {195, 37, 3},    {193, 35, 2},
    {190, 33, 2},   {188, 32, 2},   {185, 30, 2},    {183, 29, 2},
    {180, 27, 1},   {178, 26, 1},   {175, 24, 1},    {172, 23, 1},
    {169, 22, 1},   {167, 20, 1},   {164, 19, 1},    {161, 18, 1},
    {158, 16, 1},   {155, 15, 1},   {152, 14, 1},    {149, 13, 1},
    {146, 11, 1},   {142, 10, 1},   {139, 9, 2},     {136, 8, 2},
    {133, 7, 2},    {129, 6, 2},    {126, 5, 2},     {122, 4, 3}};

// contributed by @devnulling
static unsigned char plasma[256][3] = {
    {12, 7, 134},   {16, 7, 135},   {19, 6, 137},   {21, 6, 138},
    {24, 6, 139},   {27, 6, 140},   {29, 6, 141},   {31, 5, 142},
    {33, 5, 143},   {35, 5, 144},   {37, 5, 145},   {39, 5, 146},
    {41, 5, 147},   {43, 5, 148},   {45, 4, 148},   {47, 4, 149},
    {49, 4, 150},   {51, 4, 151},   {52, 4, 152},   {54, 4, 152},
    {56, 4, 153},   {58, 4, 154},   {59, 3, 154},   {61, 3, 155},
    {63, 3, 156},   {64, 3, 156},   {66, 3, 157},   {68, 3, 158},
    {69, 3, 158},   {71, 2, 159},   {73, 2, 159},   {74, 2, 160},
    {76, 2, 161},   {78, 2, 161},   {79, 2, 162},   {81, 1, 162},
    {82, 1, 163},   {84, 1, 163},   {86, 1, 163},   {87, 1, 164},
    {89, 1, 164},   {90, 0, 165},   {92, 0, 165},   {94, 0, 165},
    {95, 0, 166},   {97, 0, 166},   {98, 0, 166},   {100, 0, 167},
    {101, 0, 167},  {103, 0, 167},  {104, 0, 167},  {106, 0, 167},
    {108, 0, 168},  {109, 0, 168},  {111, 0, 168},  {112, 0, 168},
    {114, 0, 168},  {115, 0, 168},  {117, 0, 168},  {118, 1, 168},
    {120, 1, 168},  {121, 1, 168},  {123, 2, 168},  {124, 2, 167},
    {126, 3, 167},  {127, 3, 167},  {129, 4, 167},  {130, 4, 167},
    {132, 5, 166},  {133, 6, 166},  {134, 7, 166},  {136, 7, 165},
    {137, 8, 165},  {139, 9, 164},  {140, 10, 164}, {142, 12, 164},
    {143, 13, 163}, {144, 14, 163}, {146, 15, 162}, {147, 16, 161},
    {149, 17, 161}, {150, 18, 160}, {151, 19, 160}, {153, 20, 159},
    {154, 21, 158}, {155, 23, 158}, {157, 24, 157}, {158, 25, 156},
    {159, 26, 155}, {160, 27, 155}, {162, 28, 154}, {163, 29, 153},
    {164, 30, 152}, {165, 31, 151}, {167, 33, 151}, {168, 34, 150},
    {169, 35, 149}, {170, 36, 148}, {172, 37, 147}, {173, 38, 146},
    {174, 39, 145}, {175, 40, 144}, {176, 42, 143}, {177, 43, 143},
    {178, 44, 142}, {180, 45, 141}, {181, 46, 140}, {182, 47, 139},
    {183, 48, 138}, {184, 50, 137}, {185, 51, 136}, {186, 52, 135},
    {187, 53, 134}, {188, 54, 133}, {189, 55, 132}, {190, 56, 131},
    {191, 57, 130}, {192, 59, 129}, {193, 60, 128}, {194, 61, 128},
    {195, 62, 127}, {196, 63, 126}, {197, 64, 125}, {198, 65, 124},
    {199, 66, 123}, {200, 68, 122}, {201, 69, 121}, {202, 70, 120},
    {203, 71, 119}, {204, 72, 118}, {205, 73, 117}, {206, 74, 117},
    {207, 75, 116}, {208, 77, 115}, {209, 78, 114}, {209, 79, 113},
    {210, 80, 112}, {211, 81, 111}, {212, 82, 110}, {213, 83, 109},
    {214, 85, 109}, {215, 86, 108}, {215, 87, 107}, {216, 88, 106},
    {217, 89, 105}, {218, 90, 104}, {219, 91, 103}, {220, 93, 102},
    {220, 94, 102}, {221, 95, 101}, {222, 96, 100}, {223, 97, 99},
    {223, 98, 98},  {224, 100, 97}, {225, 101, 96}, {226, 102, 96},
    {227, 103, 95}, {227, 104, 94}, {228, 106, 93}, {229, 107, 92},
    {229, 108, 91}, {230, 109, 90}, {231, 110, 90}, {232, 112, 89},
    {232, 113, 88}, {233, 114, 87}, {234, 115, 86}, {234, 116, 85},
    {235, 118, 84}, {236, 119, 84}, {236, 120, 83}, {237, 121, 82},
    {237, 123, 81}, {238, 124, 80}, {239, 125, 79}, {239, 126, 78},
    {240, 128, 77}, {240, 129, 77}, {241, 130, 76}, {242, 132, 75},
    {242, 133, 74}, {243, 134, 73}, {243, 135, 72}, {244, 137, 71},
    {244, 138, 71}, {245, 139, 70}, {245, 141, 69}, {246, 142, 68},
    {246, 143, 67}, {246, 145, 66}, {247, 146, 65}, {247, 147, 65},
    {248, 149, 64}, {248, 150, 63}, {248, 152, 62}, {249, 153, 61},
    {249, 154, 60}, {250, 156, 59}, {250, 157, 58}, {250, 159, 58},
    {250, 160, 57}, {251, 162, 56}, {251, 163, 55}, {251, 164, 54},
    {252, 166, 53}, {252, 167, 53}, {252, 169, 52}, {252, 170, 51},
    {252, 172, 50}, {252, 173, 49}, {253, 175, 49}, {253, 176, 48},
    {253, 178, 47}, {253, 179, 46}, {253, 181, 45}, {253, 182, 45},
    {253, 184, 44}, {253, 185, 43}, {253, 187, 43}, {253, 188, 42},
    {253, 190, 41}, {253, 192, 41}, {253, 193, 40}, {253, 195, 40},
    {253, 196, 39}, {253, 198, 38}, {252, 199, 38}, {252, 201, 38},
    {252, 203, 37}, {252, 204, 37}, {252, 206, 37}, {251, 208, 36},
    {251, 209, 36}, {251, 211, 36}, {250, 213, 36}, {250, 214, 36},
    {250, 216, 36}, {249, 217, 36}, {249, 219, 36}, {248, 221, 36},
    {248, 223, 36}, {247, 224, 36}, {247, 226, 37}, {246, 228, 37},
    {246, 229, 37}, {245, 231, 38}, {245, 233, 38}, {244, 234, 38},
    {243, 236, 38}, {243, 238, 38}, {242, 240, 38}, {242, 241, 38},
    {241, 243, 38}, {240, 245, 37}, {240, 246, 35}, {239, 248, 33}};

// contributed by @Piruzzolo
static float viridis[256][3] = {
    {0.267004, 0.004874, 0.329415}, {0.268510, 0.009605, 0.335427},
    {0.269944, 0.014625, 0.341379}, {0.271305, 0.019942, 0.347269},
    {0.272594, 0.025563, 0.353093}, {0.273809, 0.031497, 0.358853},
    {0.274952, 0.037752, 0.364543}, {0.276022, 0.044167, 0.370164},
    {0.277018, 0.050344, 0.375715}, {0.277941, 0.056324, 0.381191},
    {0.278791, 0.062145, 0.386592}, {0.279566, 0.067836, 0.391917},
    {0.280267, 0.073417, 0.397163}, {0.280894, 0.078907, 0.402329},
    {0.281446, 0.084320, 0.407414}, {0.281924, 0.089666, 0.412415},
    {0.282327, 0.094955, 0.417331}, {0.282656, 0.100196, 0.422160},
    {0.282910, 0.105393, 0.426902}, {0.283091, 0.110553, 0.431554},
    {0.283197, 0.115680, 0.436115}, {0.283229, 0.120777, 0.440584},
    {0.283187, 0.125848, 0.444960}, {0.283072, 0.130895, 0.449241},
    {0.282884, 0.135920, 0.453427}, {0.282623, 0.140926, 0.457517},
    {0.282290, 0.145912, 0.461510}, {0.281887, 0.150881, 0.465405},
    {0.281412, 0.155834, 0.469201}, {0.280868, 0.160771, 0.472899},
    {0.280255, 0.165693, 0.476498}, {0.279574, 0.170599, 0.479997},
    {0.278826, 0.175490, 0.483397}, {0.278012, 0.180367, 0.486697},
    {0.277134, 0.185228, 0.489898}, {0.276194, 0.190074, 0.493001},
    {0.275191, 0.194905, 0.496005}, {0.274128, 0.199721, 0.498911},
    {0.273006, 0.204520, 0.501721}, {0.271828, 0.209303, 0.504434},
    {0.270595, 0.214069, 0.507052}, {0.269308, 0.218818, 0.509577},
    {0.267968, 0.223549, 0.512008}, {0.266580, 0.228262, 0.514349},
    {0.265145, 0.232956, 0.516599}, {0.263663, 0.237631, 0.518762},
    {0.262138, 0.242286, 0.520837}, {0.260571, 0.246922, 0.522828},
    {0.258965, 0.251537, 0.524736}, {0.257322, 0.256130, 0.526563},
    {0.255645, 0.260703, 0.528312}, {0.253935, 0.265254, 0.529983},
    {0.252194, 0.269783, 0.531579}, {0.250425, 0.274290, 0.533103},
    {0.248629, 0.278775, 0.534556}, {0.246811, 0.283237, 0.535941},
    {0.244972, 0.287675, 0.537260}, {0.243113, 0.292092, 0.538516},
    {0.241237, 0.296485, 0.539709}, {0.239346, 0.300855, 0.540844},
    {0.237441, 0.305202, 0.541921}, {0.235526, 0.309527, 0.542944},
    {0.233603, 0.313828, 0.543914}, {0.231674, 0.318106, 0.544834},
    {0.229739, 0.322361, 0.545706}, {0.227802, 0.326594, 0.546532},
    {0.225863, 0.330805, 0.547314}, {0.223925, 0.334994, 0.548053},
    {0.221989, 0.339161, 0.548752}, {0.220057, 0.343307, 0.549413},
    {0.218130, 0.347432, 0.550038}, {0.216210, 0.351535, 0.550627},
    {0.214298, 0.355619, 0.551184}, {0.212395, 0.359683, 0.551710},
    {0.210503, 0.363727, 0.552206}, {0.208623, 0.367752, 0.552675},
    {0.206756, 0.371758, 0.553117}, {0.204903, 0.375746, 0.553533},
    {0.203063, 0.379716, 0.553925}, {0.201239, 0.383670, 0.554294},
    {0.199430, 0.387607, 0.554642}, {0.197636, 0.391528, 0.554969},
    {0.195860, 0.395433, 0.555276}, {0.194100, 0.399323, 0.555565},
    {0.192357, 0.403199, 0.555836}, {0.190631, 0.407061, 0.556089},
    {0.188923, 0.410910, 0.556326}, {0.187231, 0.414746, 0.556547},
    {0.185556, 0.418570, 0.556753}, {0.183898, 0.422383, 0.556944},
    {0.182256, 0.426184, 0.557120}, {0.180629, 0.429975, 0.557282},
    {0.179019, 0.433756, 0.557430}, {0.177423, 0.437527, 0.557565},
    {0.175841, 0.441290, 0.557685}, {0.174274, 0.445044, 0.557792},
    {0.172719, 0.448791, 0.557885}, {0.171176, 0.452530, 0.557965},
    {0.169646, 0.456262, 0.558030}, {0.168126, 0.459988, 0.558082},
    {0.166617, 0.463708, 0.558119}, {0.165117, 0.467423, 0.558141},
    {0.163625, 0.471133, 0.558148}, {0.162142, 0.474838, 0.558140},
    {0.160665, 0.478540, 0.558115}, {0.159194, 0.482237, 0.558073},
    {0.157729, 0.485932, 0.558013}, {0.156270, 0.489624, 0.557936},
    {0.154815, 0.493313, 0.557840}, {0.153364, 0.497000, 0.557724},
    {0.151918, 0.500685, 0.557587}, {0.150476, 0.504369, 0.557430},
    {0.149039, 0.508051, 0.557250}, {0.147607, 0.511733, 0.557049},
    {0.146180, 0.515413, 0.556823}, {0.144759, 0.519093, 0.556572},
    {0.143343, 0.522773, 0.556295}, {0.141935, 0.526453, 0.555991},
    {0.140536, 0.530132, 0.555659}, {0.139147, 0.533812, 0.555298},
    {0.137770, 0.537492, 0.554906}, {0.136408, 0.541173, 0.554483},
    {0.135066, 0.544853, 0.554029}, {0.133743, 0.548535, 0.553541},
    {0.132444, 0.552216, 0.553018}, {0.131172, 0.555899, 0.552459},
    {0.129933, 0.559582, 0.551864}, {0.128729, 0.563265, 0.551229},
    {0.127568, 0.566949, 0.550556}, {0.126453, 0.570633, 0.549841},
    {0.125394, 0.574318, 0.549086}, {0.124395, 0.578002, 0.548287},
    {0.123463, 0.581687, 0.547445}, {0.122606, 0.585371, 0.546557},
    {0.121831, 0.589055, 0.545623}, {0.121148, 0.592739, 0.544641},
    {0.120565, 0.596422, 0.543611}, {0.120092, 0.600104, 0.542530},
    {0.119738, 0.603785, 0.541400}, {0.119512, 0.607464, 0.540218},
    {0.119423, 0.611141, 0.538982}, {0.119483, 0.614817, 0.537692},
    {0.119699, 0.618490, 0.536347}, {0.120081, 0.622161, 0.534946},
    {0.120638, 0.625828, 0.533488}, {0.121380, 0.629492, 0.531973},
    {0.122312, 0.633153, 0.530398}, {0.123444, 0.636809, 0.528763},
    {0.124780, 0.640461, 0.527068}, {0.126326, 0.644107, 0.525311},
    {0.128087, 0.647749, 0.523491}, {0.130067, 0.651384, 0.521608},
    {0.132268, 0.655014, 0.519661}, {0.134692, 0.658636, 0.517649},
    {0.137339, 0.662252, 0.515571}, {0.140210, 0.665859, 0.513427},
    {0.143303, 0.669459, 0.511215}, {0.146616, 0.673050, 0.508936},
    {0.150148, 0.676631, 0.506589}, {0.153894, 0.680203, 0.504172},
    {0.157851, 0.683765, 0.501686}, {0.162016, 0.687316, 0.499129},
    {0.166383, 0.690856, 0.496502}, {0.170948, 0.694384, 0.493803},
    {0.175707, 0.697900, 0.491033}, {0.180653, 0.701402, 0.488189},
    {0.185783, 0.704891, 0.485273}, {0.191090, 0.708366, 0.482284},
    {0.196571, 0.711827, 0.479221}, {0.202219, 0.715272, 0.476084},
    {0.208030, 0.718701, 0.472873}, {0.214000, 0.722114, 0.469588},
    {0.220124, 0.725509, 0.466226}, {0.226397, 0.728888, 0.462789},
    {0.232815, 0.732247, 0.459277}, {0.239374, 0.735588, 0.455688},
    {0.246070, 0.738910, 0.452024}, {0.252899, 0.742211, 0.448284},
    {0.259857, 0.745492, 0.444467}, {0.266941, 0.748751, 0.440573},
    {0.274149, 0.751988, 0.436601}, {0.281477, 0.755203, 0.432552},
    {0.288921, 0.758394, 0.428426}, {0.296479, 0.761561, 0.424223},
    {0.304148, 0.764704, 0.419943}, {0.311925, 0.767822, 0.415586},
    {0.319809, 0.770914, 0.411152}, {0.327796, 0.773980, 0.406640},
    {0.335885, 0.777018, 0.402049}, {0.344074, 0.780029, 0.397381},
    {0.352360, 0.783011, 0.392636}, {0.360741, 0.785964, 0.387814},
    {0.369214, 0.788888, 0.382914}, {0.377779, 0.791781, 0.377939},
    {0.386433, 0.794644, 0.372886}, {0.395174, 0.797475, 0.367757},
    {0.404001, 0.800275, 0.362552}, {0.412913, 0.803041, 0.357269},
    {0.421908, 0.805774, 0.351910}, {0.430983, 0.808473, 0.346476},
    {0.440137, 0.811138, 0.340967}, {0.449368, 0.813768, 0.335384},
    {0.458674, 0.816363, 0.329727}, {0.468053, 0.818921, 0.323998},
    {0.477504, 0.821444, 0.318195}, {0.487026, 0.823929, 0.312321},
    {0.496615, 0.826376, 0.306377}, {0.506271, 0.828786, 0.300362},
    {0.515992, 0.831158, 0.294279}, {0.525776, 0.833491, 0.288127},
    {0.535621, 0.835785, 0.281908}, {0.545524, 0.838039, 0.275626},
    {0.555484, 0.840254, 0.269281}, {0.565498, 0.842430, 0.262877},
    {0.575563, 0.844566, 0.256415}, {0.585678, 0.846661, 0.249897},
    {0.595839, 0.848717, 0.243329}, {0.606045, 0.850733, 0.236712},
    {0.616293, 0.852709, 0.230052}, {0.626579, 0.854645, 0.223353},
    {0.636902, 0.856542, 0.216620}, {0.647257, 0.858400, 0.209861},
    {0.657642, 0.860219, 0.203082}, {0.668054, 0.861999, 0.196293},
    {0.678489, 0.863742, 0.189503}, {0.688944, 0.865448, 0.182725},
    {0.699415, 0.867117, 0.175971}, {0.709898, 0.868751, 0.169257},
    {0.720391, 0.870350, 0.162603}, {0.730889, 0.871916, 0.156029},
    {0.741388, 0.873449, 0.149561}, {0.751884, 0.874951, 0.143228},
    {0.762373, 0.876424, 0.137064}, {0.772852, 0.877868, 0.131109},
    {0.783315, 0.879285, 0.125405}, {0.793760, 0.880678, 0.120005},
    {0.804182, 0.882046, 0.114965}, {0.814576, 0.883393, 0.110347},
    {0.824940, 0.884720, 0.106217}, {0.835270, 0.886029, 0.102646},
    {0.845561, 0.887322, 0.099702}, {0.855810, 0.888601, 0.097452},
    {0.866013, 0.889868, 0.095953}, {0.876168, 0.891125, 0.095250},
    {0.886271, 0.892374, 0.095374}, {0.896320, 0.893616, 0.096335},
    {0.906311, 0.894855, 0.098125}, {0.916242, 0.896091, 0.100717},
    {0.926106, 0.897330, 0.104071}, {0.935904, 0.898570, 0.108131},
    {0.945636, 0.899815, 0.112838}, {0.955300, 0.901065, 0.118128},
    {0.964894, 0.902323, 0.123941}, {0.974417, 0.903590, 0.130215},
    {0.983868, 0.904867, 0.136897}, {0.993248, 0.906157, 0.143936}};

Waterfall::Colormap getColormap(const QString& name)
{
    Waterfall::Colormap colormap;

    if (name.compare("gqrx", Qt::CaseInsensitive) == 0) {
        for (int i = 0; i < 256; i++) {
            // level 0: black background
            if (i < 20)
                colormap[i] = qRgb(0, 0, 0);
            // level 1: black -> blue
            else if ((i >= 20) && (i < 70))
                colormap[i] = qRgb(0, 0, 140 * (i - 20) / 50);
            // level 2: blue -> light-blue / greenish
            else if ((i >= 70) && (i < 100))
                colormap[i] = qRgb(60 * (i - 70) / 30, 125 * (i - 70) / 30,
                                   115 * (i - 70) / 30 + 140);
            // level 3: light blue -> yellow
            else if ((i >= 100) && (i < 150))
                colormap[i] =
                    qRgb(195 * (i - 100) / 50 + 60, 130 * (i - 100) / 50 + 125,
                         255 - (255 * (i - 100) / 50));
            // level 4: yellow -> red
            else if ((i >= 150) && (i < 250))
                colormap[i] = qRgb(255, 255 - 255 * (i - 150) / 100, 0);
            // level 5: red -> white
            else if (i >= 250)
                colormap[i] =
                    qRgb(255, 255 * (i - 250) / 5, 255 * (i - 250) / 5);
        }
    } else if (name.compare("turbo", Qt::CaseInsensitive) == 0) {
        for (int i = 0; i < 256; i++)
            colormap[i] = qRgb(turbo[i][0], turbo[i][1], turbo[i][2]);
    } else if (name.compare("plasma", Qt::CaseInsensitive) == 0) {
        for (int i = 0; i < 256; i++)
            colormap[i] = qRgb(plasma[i][0], plasma[i][1], plasma[i][2]);
    } else if (name.compare("whitehotcompressed", Qt::CaseInsensitive) == 0) {
        // contributed by @drmpeg @devnulling
        // for use with high quality spectrum paining
        // see https://gist.github.com/drmpeg/31a9a7dd6918856aeb60
        for (int i = 0; i < 256; i++) {
            if (i < 64) {
                colormap[i] = qRgb(i * 4, i * 4, i * 4);
            } else {
                colormap[i] = qRgb(255, 255, 255);
            }
        }
    } else if (name.compare("whitehot", Qt::CaseInsensitive) == 0) {
        for (int i = 0; i < 256; i++)
            colormap[i] = qRgb(i, i, i);
    } else if (name.compare("blackhot", Qt::CaseInsensitive) == 0) {
        for (int i = 0; i < 256; i++)
            colormap[i] = qRgb(255 - i, 255 - i, 255 - i);
    } else if (name.compare("viridis", Qt::CaseInsensitive) == 0) {
        for (int i = 0; i < 256; i++)
            colormap[i] = qRgb(F2B(viridis[i][0]), F2B(viridis[i][1]),
                               F2B(viridis[i][2]));
    }

    return colormap;
}
